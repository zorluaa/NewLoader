local FOV_RADIUS = 100 -- The radius of the area where silent aim will work
local Players = game:GetService("Players")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Function to calculate the distance between two points
local function calculateDistance(pos1, pos2)
    return (pos1 - pos2).Magnitude
end

-- Function to find the closest player within the FOV
local function getClosestTarget()
    local closestTarget = nil
    local shortestDistance = FOV_RADIUS

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local targetPos = player.Character.HumanoidRootPart.Position
            local screenPos = Camera:WorldToScreenPoint(targetPos)
            local distance = calculateDistance(Vector3.new(Mouse.X, Mouse.Y, 0), Vector3.new(screenPos.X, screenPos.Y, 0))

            if distance < shortestDistance then
                closestTarget = player
                shortestDistance = distance
            end
        end
    end

    return closestTarget
end

-- Function to shoot at the closest target silently
local function aimAndShoot()
    local targetPlayer = getClosestTarget()
    if targetPlayer then
        -- Fire the remote or trigger the shot towards the target's position
        local targetPos = targetPlayer.Character.HumanoidRootPart.Position
        local args = {
            [1] = targetPos,  -- The target position
            [2] = targetPos,  -- The shot location
            -- You can add more arguments based on how your game handles shooting
        }

        -- Assuming you have a remote for shooting
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Shoot"):FireServer(unpack(args))
    end
end

-- Call aimAndShoot when the left mouse button is clicked
Mouse.Button1Down:Connect(function()
    aimAndShoot()
end)
